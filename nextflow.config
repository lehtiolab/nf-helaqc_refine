params {
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

  test = false

  // both refine and qc:
  db = false
  instrument = false
  outdir = 'output'

  // QC
  raw = false
  mzml = false
  mods = "${baseDir}/data/labelfreemods.txt"
  noquant = false
  overbook_cpus_factor = 1
  filters = false
  options = false
  psmconf = 0.01
  pepconf = 0.01

  prectol = false
  fragtol = false

  // refine:
  isobaric = 'lf'
}


nextflow.enable.configProcessNamesValidation = false
includeConfig 'configuration/base.config'

external_config_version = 'main'


profiles {

  qc {
    process.clusterOptions = '--qos=qc'
    params.threadspercore = 2
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${external_config_version}/nf-configs/qc.config"
  }

  docker {
    docker {
      enabled = true
      fixOwnership = true
    }
  }

  test {
    docker {
      enabled = true
      fixOwnership = true
    }
    //params.test = true
    process.memory = 15.GB
  }

  lehtio { 
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${external_config_version}/nf-configs/lehtio.config"
    trace {
      file = './trace.txt'
      overwrite = true
    }
    params {
      db = "${data_file_path}/ENS111_Homo_sapiens.fa"
    }
  }
}


process {
  withName: sage {
    cpus = 4
  }

  withName: dinosaur {
    cpus = 2
  }

  withName: sagePrepare {
    cpus = 1
  }

  withName: msconvert {
    containerOptions = '--rm'
    container = 'proteowizard/pwiz-skyline-i-agree-to-the-vendor-licenses:3.0.24172-63d00b1'
  }

  withName: mzRefine {
    containerOptions = '--rm'
    container = 'proteowizard/pwiz-skyline-i-agree-to-the-vendor-licenses:3.0.24172-63d00b1'
  }
}

manifest {
  name = 'lehtiolab/nf-mslab'
  author = 'Jorrit Boekel'
  homePage = 'https://github.com/lehtiolab/nf-mslab'
  description = 'HeLa QC and refine precursor in mzML pipelines'
  nextflowVersion = '==24.04.1'
  version = '3.0'
}

def check_max(obj, type) {
    if (type == 'memory') {
        test = obj as nextflow.util.MemoryUnit
        try {
            if (test.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        test = obj as nextflow.util.Duration
        try {
            if (test.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
